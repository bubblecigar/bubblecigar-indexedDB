{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CheckIDBsupport","React","useState","support","setSupport","useEffect","Boolean","window","stringifyObject","eventTarget","toString","slice","EventCardContainer","styled","div","EventCardStyle","EventCardItem","props","background","color","EventCard","event","includes","target","type","IDBContext","name","setName","version","setVersion","eventQueue","setEventQueue","eventQueueRef","useRef","syncQueue","useCallback","current","pushEvent","push","idb","setIdb","onclose","e","onabort","onerror","onversionchange","currentTarget","close","openBtnRef","ref","click","placeholder","value","onChange","style","width","min","onClick","openRequest","indexedDB","open","addEventListener","result","forEach","store","objectStoreNames","contains","createObjectStore","keyPath","deleteRequest","deleteDatabase","map","i","key","Banner","FlexRow","SelectableCard","selected","ObjectStore","stores","useMemo","length","setStore","s","Transaction","values","setValues","readStore","Promise","resolve","reject","transaction","objectStore","getAllKeys","onsuccess","then","keys","get","item","request","put","console","log","oncomplete","id","Math","random","toFixed","clear","clearStore","ItemCardStyle","delete","deleteItem","ItemCard","App","className","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.20092cfd.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport styled from 'styled-components'\n\nconst mainColor = '#282c34'\n\nfunction App () {\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        IndexedDb\n      </header>\n      <CheckIDBsupport />\n      <IDBContext />\n    </div>\n  )\n}\n\nconst CheckIDBsupport = () => {\n  const [support, setSupport] = React.useState(null)\n  React.useEffect(\n    () => {\n      setSupport(Boolean('indexedDB' in window))\n    }, []\n  )\n  return (\n    <p>\n      indexedDB is {support ? '' : 'not '}supported by the current browser.\n    </p>\n  )\n}\n\n// [object eventTargetName]\nconst stringifyObject = eventTarget => eventTarget.toString().slice(8, -1)\n\nconst EventCardContainer = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  align-items: center;\n  margin: 10px;\n  max-width: 100%;\n`\nconst EventCardStyle = styled.div`\n  margin: 10px;\n  border: 1px solid black;\n  position: relative;\n\n  &::after {\n    content: '';\n    width: 0px;\n    height: 0px;\n    border: 7px transparent solid;\n    border-left: 7px ${mainColor} solid;\n    position: absolute;\n    left: calc(100% + 5px);\n    top: 50%;\n    transform: translateY(-50%);\n  }\n\n  &:last-child::after{\n    border-left: 7px transparent solid;\n  }\n`\nconst EventCardItem = styled.div`\n  padding: 5px;\n  border: 1px solid black;\n  background-color: ${props => props.background};\n  color: ${props => props.color};\n`\nconst EventCard = ({ event }) => {\n  return (\n    <EventCardStyle>\n      <EventCardItem background={stringifyObject(event).includes('custom') ? 'goldenrod' : mainColor} color='#fff'>\n        {stringifyObject(event.target)}\n      </EventCardItem>\n      <EventCardItem>\n        {stringifyObject(event)}\n      </EventCardItem>\n      <EventCardItem color={event.type === 'error' ? 'red' : 'green'}>\n        {event.type}\n      </EventCardItem>\n    </EventCardStyle>\n  )\n}\n\nconst IDBContext = () => {\n  const [name, setName] = React.useState('test-db')\n  const [version, setVersion] = React.useState(1)\n\n  const [eventQueue, setEventQueue] = React.useState([])\n  const eventQueueRef = React.useRef([])\n  const syncQueue = React.useCallback(\n    () => setEventQueue([...eventQueueRef.current]), [setEventQueue]\n  )\n\n  const pushEvent = React.useCallback(\n    event => {\n      eventQueueRef.current.push(event)\n      syncQueue()\n    }, [syncQueue]\n  )\n\n  const [idb, setIdb] = React.useState(null)\n  React.useEffect(\n    () => {\n      if (!idb) return\n      idb.onclose = e => {\n        pushEvent(e)\n      }\n      idb.onabort = e => {\n        pushEvent(e)\n      }\n      idb.onerror = e => {\n        pushEvent(e)\n      }\n      idb.onversionchange = e => {\n        pushEvent(e)\n        e.currentTarget.close()\n        pushEvent({\n          type: 'close',\n          target: idb,\n          toString: () => '[object customCloseEvent]'\n        })\n        setIdb(null)\n      }\n    }, [idb, pushEvent]\n  )\n\n  const onOpen = e => {\n    const openRequest = window.indexedDB.open(name, version)\n    openRequest.addEventListener('success', e => {\n      if (idb) {\n        idb.close()\n        pushEvent({\n          type: 'close',\n          target: idb,\n          toString: () => '[object customCloseEvent]'\n        })\n        setIdb(null)\n      }\n      setIdb(e.currentTarget.result)\n      pushEvent(e)\n    })\n    openRequest.addEventListener('error', e => {\n      pushEvent(e)\n    })\n    openRequest.addEventListener('upgradeneeded', e => {\n      pushEvent(e)\n      const idb = e.target.result\n      const stores = ['store A', 'store B', 'store C', 'store D', 'store E']\n      stores.forEach(\n        store => {\n          if (!idb.objectStoreNames.contains(store)) {\n            idb.createObjectStore(store, { keyPath: 'id' })\n          }\n        }\n      )\n    })\n    openRequest.addEventListener('blocked', e => {\n      pushEvent(e)\n      idb && idb.close() && pushEvent({\n        type: 'close',\n        target: idb,\n        toString: () => '[object customCloseEvent]'\n      })\n      setIdb(null)\n    })\n  }\n\n  const clearEventLog = () => {\n    eventQueueRef.current = []\n    syncQueue()\n  }\n\n  const onDelete = e => {\n    const deleteRequest = window.indexedDB.deleteDatabase(name)\n    deleteRequest.addEventListener('success', e => {\n      pushEvent(e)\n      setIdb(null)\n    })\n    deleteRequest.addEventListener('error', e => {\n      pushEvent(e)\n    })\n  }\n\n  const openBtnRef = React.useCallback(\n    ref => {\n      if (ref) {\n        ref.click()\n      }\n    }, []\n  )\n\n  return (\n    <>\n      <p>\n        <input\n          placeholder='database name'\n          value={name} onChange={e => setName(e.target.value)}\n        />\n        <input\n          style={{ width: '40px' }}\n          placeholder='version'\n          type='number' min={1}\n          value={version} onChange={e => setVersion(e.target.value)}\n        />\n        <button ref={openBtnRef} onClick={onOpen}>open</button>\n        <button onClick={onDelete}>delete</button>\n        <button onClick={clearEventLog}>clear log</button>\n      </p>\n      <EventCardContainer>\n        {\n          eventQueue.map(\n            (event, i) => <EventCard key={i} event={event} />\n          )\n        }\n      </EventCardContainer>\n      {\n        idb && (\n          <Banner>\n            <span>\n              {idb.name}\n            </span>\n            <small>vers. {idb.version}</small>\n          </Banner>\n        )\n      }\n      {idb && <ObjectStore idb={idb} />}\n    </>\n  )\n}\nconst Banner = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: center;\n  align-items: flex-end;\n  padding: 20px;\n  max-width: 100%;\n  background-color: ${mainColor};\n  color: white;\n  > span {\n    margin: 5px;\n    font-size: 30px;\n  }\n`\n\nconst FlexRow = styled.div`\n  display: flex;\n  flex-flow: row wrap;\n  justify-content: space-evenly;\n  align-items: center;\n  margin: 10px;\n  max-width: 100%;\n`\nconst SelectableCard = styled.div`\n  border: 1px solid black;\n  padding: 10px;\n  background-color: ${props => props.selected ? 'gold' : 'white'};\n  color: ${props => props.selected ? 'black' : mainColor};\n`\nconst ObjectStore = ({ idb }) => {\n  const stores = React.useMemo(\n    () => {\n      const stores = []\n      for (let i = 0; i < idb.objectStoreNames.length; i++) {\n        stores.push(idb.objectStoreNames[i])\n      }\n      return stores\n    }, [idb]\n  )\n  const [store, setStore] = React.useState('store A')\n\n  return (\n    <>\n      <FlexRow>\n        {\n          stores.map(\n            s => (\n              <SelectableCard\n                key={s}\n                onClick={() => setStore(s)}\n                selected={s === store}\n              >\n                {s}\n              </SelectableCard>\n            )\n          )\n        }\n      </FlexRow>\n      {store && <Transaction idb={idb} store={store} />}\n    </>\n  )\n}\n\nconst Transaction = ({ idb, store }) => {\n  const rollItem = () => {\n    return ({\n      id: Math.random().toFixed(2),\n      name: Math.random().toFixed(2)\n    })\n  }\n\n  const put = (store, item) => {\n    const transaction = idb.transaction(store, 'readwrite')\n\n    const objectStore = transaction.objectStore(store)\n    const request = objectStore.put(item)\n    request.onsuccess = () => console.log(request.result)\n    request.onerror = () => console.log(request.result)\n\n    transaction.oncomplete = () => {\n      readStore(store)\n    }\n  }\n\n  const [values, setValues] = React.useState([])\n  const readStore = React.useCallback(\n    store => new Promise(\n      (resolve, reject) => {\n        const transaction = idb.transaction(store, 'readonly')\n        const objectStore = transaction.objectStore(store)\n        const request = objectStore.getAllKeys()\n        request.onsuccess = e => {\n          resolve([...e.target.result])\n        }\n      }\n    ).then(\n      keys => new Promise(\n        (resolve, reject) => {\n          if (keys.length === 0) {\n            resolve([])\n          }\n          const values = []\n          for (let i = 0; i < keys.length; i++) {\n            const transaction = idb.transaction(store, 'readonly')\n            const objectStore = transaction.objectStore(store)\n            const request = objectStore.get(keys[i])\n            request.onsuccess = e => {\n              values.push(e.target.result)\n              if (values.length === keys.length) {\n                resolve(values)\n              }\n            }\n          }\n        }\n      ).then(\n        values => setValues(values)\n      )\n    ), [idb]\n  )\n\n  React.useEffect(\n    () => {\n      setValues([])\n    }, [store]\n  )\n  React.useEffect(\n    () => {\n      readStore(store)\n    }, [idb, store, readStore]\n  )\n\n  const deleteItem = (store, key) => {\n    const transaction = idb.transaction(store, 'readwrite')\n    const objectStore = transaction.objectStore(store)\n    const request = objectStore.delete(key)\n    request.onsuccess = () => console.log(request.result)\n    request.onerror = () => console.log(request.result)\n    transaction.oncomplete = () => {\n      readStore(store)\n    }\n  }\n\n  const clearStore = store => {\n    const transaction = idb.transaction(store, 'readwrite')\n    const objectStore = transaction.objectStore(store)\n    const request = objectStore.clear()\n    request.onsuccess = () => console.log(request.result)\n    request.onerror = () => console.log(request.result)\n    transaction.oncomplete = () => {\n      readStore(store)\n    }\n  }\n\n  return (\n    <div>\n      <button onClick={() => put(store, rollItem())}>put</button>\n      <button onClick={() => { clearStore(store) }}>clear all</button>\n      <EventCardContainer>\n        {\n          values.map(\n            value => (\n              <ItemCardStyle key={value.id} onClick={() => { deleteItem(store, value.id) }}>\n                <ItemCard\n                  item={value}\n                />\n              </ItemCardStyle>\n            )\n          )\n        }\n      </EventCardContainer>\n    </div>\n  )\n}\n\nconst ItemCardStyle = styled.div`\n  margin: 10px;\n  border: 1px solid black;\n  \n  > div {\n    padding: 8px;\n  }\n\n  > div:first-child {\n    background-color: ${mainColor};\n    color: white;\n  }\n`\nconst ItemCard = ({ item }) => {\n  return (\n    <>\n      <div>\n        {item.id}\n      </div>\n      <div>\n        {item.name}\n      </div>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}